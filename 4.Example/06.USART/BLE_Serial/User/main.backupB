#include "debug.h"


/* Global typedef */
typedef enum { FAILED = 0, PASSED = !FAILED} TestStatus;

/* Global define */
#define TxSize1   (size(TxBuffer1))
#define RXBUF_SIZE 1024
#define size(a)   (sizeof(a) / sizeof(*(a)))

/* Global Variable */
u8 TxBuffer1[] = " ";     /* Send by UART */
u8 RxBuffer1[RXBUF_SIZE]={0};                                             /* USART2 Using  */

u8 TxCnt1 = 0, RxCnt1 = 0;
u8 TxCnt2 = 0, RxCnt2 = 0;

u8 Rxfinish1=0,Rxfinish2=0;

TestStatus TransferStatus1 = FAILED;
TestStatus TransferStatus2 = FAILED;


/*******************************************************************************
* Function Name  : USARTx_CFG
* Description    : Initializes the USART2 & USART3 peripheral.
* Input          : None
* Return         : None
*******************************************************************************/
void USARTx_CFG(void)
{
	GPIO_InitTypeDef  GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART7, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);

	/* USART7 TX-->C2  RX-->C3 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	USART_InitStructure.USART_BaudRate = 115200;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;

	USART_Init(UART7, &USART_InitStructure);
	DMA_Cmd(DMA2_Channel9, ENABLE);                                    /* USART7 Rx */
	USART_Cmd(UART7, ENABLE);
}

/*******************************************************************************
* Function Name  : DMA_INIT
* Description    : Configures the DMA for USART2 & USART3.
* Input          : None
* Return         : None
*******************************************************************************/
void DMA_INIT(void)
{
	DMA_InitTypeDef DMA_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);

	DMA_DeInit(DMA2_Channel8);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)(&UART7->DATAR);
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)TxBuffer1;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
	DMA_InitStructure.DMA_BufferSize = 0;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
	DMA_Init(DMA2_Channel8, &DMA_InitStructure);

	DMA_DeInit(DMA2_Channel9);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)(&UART7->DATAR);
	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)RxBuffer1;
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
	DMA_InitStructure.DMA_BufferSize = RXBUF_SIZE;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_Init(DMA2_Channel9, &DMA_InitStructure);
}


/*******************************************************************************
* Function Name  : GPIO_CFG
* Description    : Initializes GPIOs.
* Input          : None
* Return         : None
*******************************************************************************/
void GPIO_CFG(void)
{
	GPIO_InitTypeDef  GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
	/* BLE_sleep --> C13  BLE_AT-->A7 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


    GPIO_WriteBit(GPIOA, GPIO_Pin_7,SET); //not AT
    GPIO_WriteBit(GPIOC, GPIO_Pin_13,SET); //enable CH9141

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    GPIO_Init(GPIOD, &GPIO_InitStructure);

}
/*******************************************************************************
* Function Name  :  uartWriteBLE
* Description    :  send data to BLE via UART7
* Input          :  char * data          data to send
*                   uint16_t num         number of data
* Return         :  RESET                UART7 busy,failed to send
*                   SET                  send success
*******************************************************************************/
FlagStatus uartWriteBLE(char * data , uint16_t num)
{
	if(DMA_GetCurrDataCounter(DMA2_Channel8) != 0){
		return RESET;
	}

    DMA_ClearFlag(DMA2_FLAG_TC8);
	DMA_Cmd(DMA2_Channel8, DISABLE );
	DMA2_Channel8->MADDR = (uint32_t)data;
	DMA_SetCurrDataCounter(DMA2_Channel8,num);
	DMA_Cmd(DMA2_Channel8, ENABLE); 
	return SET;
}

/*******************************************************************************
* Function Name  :  uartWriteBLEstr
* Description    :  send string to BLE via UART7
* Input          :  char * str          string to send
*                   uint16_t num         number of data
* Return         :  RESET                UART7 busy,failed to send
*                   SET                  send success
*******************************************************************************/
FlagStatus uartWriteBLEstr(char * str)
{
    uint16_t num = 0;
    while(str[num])num++;
    return uartWriteBLE(str,num);
}

/*******************************************************************************
* Function Name  :  uartReadBLE
* Description    :  read some bytes from UART buffer
* Input          :  char * buffer        buffer to storage the data
*                   uint16_t num         number of data to read
* Return         :  int                  number of bytes read
*******************************************************************************/
uint16_t rxBufferReadPos = 0;
uint32_t uartReadBLE(char * buffer , uint16_t num)
{
    uint16_t rxBufferEnd = RXBUF_SIZE - DMA_GetCurrDataCounter(DMA2_Channel9);
    uint16_t i = 0;
    if (rxBufferReadPos == rxBufferEnd){
        return 0;
    }

    while (rxBufferReadPos!=rxBufferEnd && i < num){
        buffer[i] = RxBuffer1[rxBufferReadPos];
        i++;
        rxBufferReadPos++;
        if(rxBufferReadPos >= RXBUF_SIZE){
            rxBufferReadPos = 0;
        }
    }
    return i;
}

/*******************************************************************************
* Function Name  :  uartReadByteBLE
* Description    :  read one byte from UART buffer
* Input          :  None
* Return         :  char    read data
*******************************************************************************/
char uartReadByteBLE()
{
    char ret;
    uint16_t rxBufferEnd = RXBUF_SIZE - DMA_GetCurrDataCounter(DMA2_Channel9);
    if (rxBufferReadPos == rxBufferEnd){
        return 0;
    }
    ret = RxBuffer1[rxBufferReadPos];
    rxBufferReadPos++;
    if(rxBufferReadPos >= RXBUF_SIZE){
        rxBufferReadPos = 0;
    }
    return ret;
}
/*******************************************************************************
* Function Name  :  uartAvailableBLE
* Description    :  get number of bytes Available to read from the UART buffer
* Input          :  None
* Return         :  uint16_t    number of bytes Available to read
*******************************************************************************/
uint16_t uartAvailableBLE()
{
    uint16_t rxBufferEnd = RXBUF_SIZE - DMA_GetCurrDataCounter(DMA2_Channel9);
    if (rxBufferReadPos <= rxBufferEnd){
        return rxBufferEnd - rxBufferReadPos;
    }else{
        return rxBufferEnd +RXBUF_SIZE -rxBufferReadPos;
    }
}

/*******************************************************************************
* Function Name  : main
* Description    : Main program.
* Input          : None
* Return         : None
*******************************************************************************/
int main(void)
{
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	Delay_Init();
	USART_Printf_Init(115200);
	printf("SystemClk:%d\r\n",SystemCoreClock);

	printf("USART DMA TEST\r\n");

	DMA_INIT();
	USARTx_CFG();                                                 /* USART INIT */
	USART_DMACmd(UART7,USART_DMAReq_Tx|USART_DMAReq_Rx,ENABLE);

	GPIO_CFG();
	while(1){
		Delay_Ms(1000);
		GPIO_WriteBit(GPIOA, GPIO_Pin_7,RESET); //AT
        while(uartWriteBLEstr("AT+BLEMODE?\r\n")==RESET);
        Delay_Ms(100);
        while(uartWriteBLEstr("AT+BLEMODE=1\r\n")==RESET);
        Delay_Ms(100);
        while(uartWriteBLEstr("AT+RESET\r\n")==RESET);
        Delay_Ms(500);
        while(uartWriteBLEstr("AT+CONADD?\r\n")==RESET);
        Delay_Ms(100);
        while(uartWriteBLEstr("AT+CONADD=8E:D4:3F:E4:C2:84,419141\r\n")==RESET);
        Delay_Ms(100);
        while(uartWriteBLEstr("AT+BLEMODE?\r\n")==RESET);
        Delay_Ms(100);
        GPIO_WriteBit(GPIOA, GPIO_Pin_7,SET); //not AT
		int num = uartAvailableBLE();
		if (num > 0 ){
            char buffer[1024]={"\0"};
            uartReadBLE(buffer , num);
            printf("Revceived:%s\r\n",buffer);
		}
		while(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_13)){
	        GPIO_WriteBit(GPIOA, GPIO_Pin_7,RESET); //AT
            Delay_Ms(1);
	        while(uartWriteBLEstr("AT+BLESTA?\r\n")==RESET);
	        GPIO_WriteBit(GPIOA, GPIO_Pin_7,SET); //not AT
	        Delay_Ms(100);
	        int num = uartAvailableBLE();
            if (num > 0 ){
                char buffer[1024]={"\0"};
                uartReadBLE(buffer , num);
                printf("Revceived:%s\r\n",buffer);
            }
		}

		// printf("TxBuffer1:%s\r\n",TxBuffer1);
		// printf("RxBuffer1:%s\r\n",RxBuffer1);
		// printf("TxBuffer2:%s\r\n",TxBuffer2);
		// printf("RxBuffer2:%s\r\n",RxBuffer2);
	}

}

